//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab8\",\"Name\":\"Exercise1\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":42}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":30}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the Quantum Fourier Transform\",\" circuit. This will perform an in-place transformation of the\",\" amplitudes of each state in the superposition from the\",\" value-versus-time to the value-versus-frequency domain.\",\"\",\" # Input\",\" ## register\",\" A register containing qubits in superposition.\",\" The superposition is unknown, and the amplitudes are not guaranteed to\",\" be uniform.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab8\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab8\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":54},\"Item2\":{\"Line\":1,\"Column\":63}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Lab8.Exercise1\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab8\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":54},\"Item2\":{\"Line\":1,\"Column\":63}},\"Documentation\":[\"automatically generated QsControlled specialization for Lab8.Exercise1\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab8\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":54},\"Item2\":{\"Line\":1,\"Column\":63}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Lab8.Exercise1\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab8\",\"Name\":\"Exercise2\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs\",\"Position\":{\"Item1\":73,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":20},\"Item2\":{\"Line\":2,\"Column\":29}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sampleRate\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":19}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"Double\"}]]},\"ReturnType\":{\"Case\":\"Double\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given a quantum register in an unknown\",\" superposition. In this superposition, a single sine wave has been\",\" encoded into the amplitudes of each term in the superposition.\",\"\",\" For example: the first sample of the wave will be the amplitude of the\",\" |0> term, the second sample of the wave will be the amplitude of the\",\" |1> term, the third will be the amplitude of the |2> term, and so on.\",\"\",\" Your goal is to find the frequency of these samples, and return that\",\" frequency.\",\"\",\" # Input\",\" ## register\",\" The register which contains the samples of the sine wave in the\",\" amplitudes of  its terms.\",\"\",\" ## sampleRate\",\" The number of samples per second that were used to collect the\",\" original samples. You will need this to retrieve the correct\",\" frequency.\",\"\",\" # Output\",\" The frequency of the sine wave.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab8\",\"Name\":\"Exercise2\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs\",\"Position\":{\"Item1\":73,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
#line hidden
namespace Lab8
{
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs", OperationFunctor.Body, 25, 74)]
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs", OperationFunctor.Adjoint, 25, 74)]
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs", OperationFunctor.Controlled, 25, 74)]
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs", OperationFunctor.ControlledAdjoint, 25, 74)]
    public partial class Exercise1 : Unitary<Microsoft.Quantum.Arithmetic.BigEndian>, ICallable
    {
        public Exercise1(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Exercise1";
        String ICallable.FullName => "Lab8.Exercise1";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Qubit)> Microsoft__Quantum__Intrinsic__R1Frac
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__SWAP
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<Microsoft.Quantum.Arithmetic.BigEndian, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 34 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var i in new QRange(0L, (register.Data.Length - 1L)))
#line hidden
            {
#line 35 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__H.Apply(register.Data[i]);
#line 36 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                foreach (var j in new QRange((i + 1L), (register.Data.Length - 1L)))
#line hidden
                {
#line 37 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Apply((new QArray<Qubit>(register.Data[j]), (2L, ((j - i) + 1L), register.Data[i])));
                }
            }

#line 41 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var length = register.Data.Length;
#line 42 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var halfLength = (length / 2L);
#line 43 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var i in new QRange(0L, (halfLength - 1L)))
#line hidden
            {
#line 44 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Apply((register.Data[i], register.Data[((length - 1L) - i)]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<Microsoft.Quantum.Arithmetic.BigEndian, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var __qsVar2__length__ = register.Data.Length;
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var __qsVar3__halfLength__ = (__qsVar2__length__ / 2L);
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var __qsVar4__i__ in RangeReverse__.Apply(new QRange(0L, (__qsVar3__halfLength__ - 1L))))
#line hidden
            {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Adjoint.Apply((register.Data[__qsVar4__i__], register.Data[((__qsVar2__length__ - 1L) - __qsVar4__i__)]));
            }

#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange(0L, (register.Data.Length - 1L))))
#line hidden
            {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                foreach (var __qsVar1__j__ in RangeReverse__.Apply(new QRange((__qsVar0__i__ + 1L), (register.Data.Length - 1L))))
#line hidden
                {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Adjoint.Apply((new QArray<Qubit>(register.Data[__qsVar1__j__]), (2L, ((__qsVar1__j__ - __qsVar0__i__) + 1L), register.Data[__qsVar0__i__])));
                }

#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(register.Data[__qsVar0__i__]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var i in new QRange(0L, (register.Data.Length - 1L)))
#line hidden
            {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__H.Controlled.Apply((__controlQubits__, register.Data[i]));
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                foreach (var j in new QRange((i + 1L), (register.Data.Length - 1L)))
#line hidden
                {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(register.Data[j]), (2L, ((j - i) + 1L), register.Data[i]))));
                }
            }

#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var length = register.Data.Length;
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var halfLength = (length / 2L);
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var i in new QRange(0L, (halfLength - 1L)))
#line hidden
            {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Controlled.Apply((__controlQubits__, (register.Data[i], register.Data[((length - 1L) - i)])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var __qsVar2__length__ = register.Data.Length;
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var __qsVar3__halfLength__ = (__qsVar2__length__ / 2L);
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var __qsVar4__i__ in RangeReverse__.Apply(new QRange(0L, (__qsVar3__halfLength__ - 1L))))
#line hidden
            {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Adjoint.Controlled.Apply((__controlQubits__, (register.Data[__qsVar4__i__], register.Data[((__qsVar2__length__ - 1L) - __qsVar4__i__)])));
            }

#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange(0L, (register.Data.Length - 1L))))
#line hidden
            {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                foreach (var __qsVar1__j__ in RangeReverse__.Apply(new QRange((__qsVar0__i__ + 1L), (register.Data.Length - 1L))))
#line hidden
                {
#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(register.Data[__qsVar1__j__]), (2L, ((__qsVar1__j__ - __qsVar0__i__) + 1L), register.Data[__qsVar0__i__]))));
                }

#line 25 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__H.Adjoint.Controlled.Apply((__controlQubits__, register.Data[__qsVar0__i__]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__R1Frac = this.__Factory__.Get<IUnitary<(Int64,Int64,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.R1Frac));
            this.Microsoft__Quantum__Intrinsic__SWAP = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.SWAP));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(Microsoft.Quantum.Arithmetic.BigEndian data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.BigEndian register)
        {
            return __m__.Run<Exercise1, Microsoft.Quantum.Arithmetic.BigEndian, QVoid>(register);
        }
    }

    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs", OperationFunctor.Body, 74, -1)]
    public partial class Exercise2 : Operation<(Microsoft.Quantum.Arithmetic.BigEndian,Double), Double>, ICallable
    {
        public Exercise2(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.BigEndian,Double)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.BigEndian,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1?.Data)?.Qubits;
                }
            }
        }

        String ICallable.Name => "Exercise2";
        String ICallable.FullName => "Lab8.Exercise2";
        protected IUnitary<Microsoft.Quantum.Arithmetic.BigEndian> Exercise1__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__SWAP
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<Result, Boolean> Microsoft__Quantum__Convert__ResultAsBool
        {
            get;
            set;
        }

        protected ICallable<(Double,Double), Double> Microsoft__Quantum__Math__PowD
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.BigEndian,Double), Double> __Body__ => (__in__) =>
        {
            var (register,sampleRate) = __in__;
#line 80 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            Exercise1__.Adjoint.Apply(register);
#line 82 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var result = 0D;
#line 84 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var length = register.Data.Length;
#line 85 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            var halfLength = (length / 2L);
#line 86 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var i in new QRange(0L, (halfLength - 1L)))
#line hidden
            {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Apply((register.Data[i], register.Data[((length - 1L) - i)]));
            }

#line 90 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            foreach (var i in new QRange(0L, (register.Data.Length - 1L)))
#line hidden
            {
#line 91 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                var temp = Microsoft__Quantum__Intrinsic__M.Apply(register.Data[i]);
#line 92 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                var val = 0D;
#line 93 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                if (Microsoft__Quantum__Convert__ResultAsBool.Apply(temp))
                {
#line 94 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                    val = 1D;
                }

#line 97 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                result = (result + (val * Microsoft__Quantum__Math__PowD.Apply((2D, Microsoft__Quantum__Convert__IntAsDouble.Apply(i)))));
            }

#line 101 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            if ((result > Microsoft__Quantum__Math__PowD.Apply((2D, Microsoft__Quantum__Convert__IntAsDouble.Apply((register.Data.Length - 1L))))))
            {
#line 102 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
                result = (Microsoft__Quantum__Math__PowD.Apply((2D, Microsoft__Quantum__Convert__IntAsDouble.Apply(register.Data.Length))) - result);
            }

#line 105 "/home/ace/scripts/quantum/QSharpExercises/Lab8/Lab8.qs"
            return ((result * sampleRate) / Microsoft__Quantum__Math__PowD.Apply((2D, Microsoft__Quantum__Convert__IntAsDouble.Apply(register.Data.Length))));
        }

        ;
        public override void __Init__()
        {
            this.Exercise1__ = this.__Factory__.Get<IUnitary<Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(Exercise1));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__SWAP = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.SWAP));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Convert__ResultAsBool = this.__Factory__.Get<ICallable<Result, Boolean>>(typeof(global::Microsoft.Quantum.Convert.ResultAsBool));
            this.Microsoft__Quantum__Math__PowD = this.__Factory__.Get<ICallable<(Double,Double), Double>>(typeof(global::Microsoft.Quantum.Math.PowD));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
        }

        public override IApplyData __DataIn__((Microsoft.Quantum.Arithmetic.BigEndian,Double) data) => new In(data);
        public override IApplyData __DataOut__(Double data) => new QTuple<Double>(data);
        public static System.Threading.Tasks.Task<Double> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.BigEndian register, Double sampleRate)
        {
            return __m__.Run<Exercise2, (Microsoft.Quantum.Arithmetic.BigEndian,Double), Double>((register, sampleRate));
        }
    }
}