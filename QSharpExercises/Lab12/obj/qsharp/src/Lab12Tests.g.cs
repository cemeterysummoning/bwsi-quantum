//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.Tests.BonusLab12\",\"Name\":\"Exercise1Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":14,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs\",\"Position\":{\"Item1\":15,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.Tests.BonusLab12\",\"Name\":\"Exercise1Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs\",\"Position\":{\"Item1\":15,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QSharpExercises.Tests.BonusLab12\",\"Name\":\"Exercise2Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":35,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs\",\"Position\":{\"Item1\":36,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QSharpExercises.Tests.BonusLab12\",\"Name\":\"Exercise2Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs\",\"Position\":{\"Item1\":36,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
#line hidden
namespace QSharpExercises.Tests.BonusLab12
{
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs", OperationFunctor.Body, 16, 37)]
    public partial class Exercise1Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise1Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise1Test")]
            public void Exercise1Test()
#line 16 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise1Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 16 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise1Test";
        String ICallable.FullName => "QSharpExercises.Tests.BonusLab12.Exercise1Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid> QSharpExercises__BonusLab12__Exercise1
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Canon__CX
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 17 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
            var secretArrayArray = new QArray<IQArray<Int64>>(new QArray<Int64>(0L, 0L, 0L), new QArray<Int64>(0L, 0L, 1L), new QArray<Int64>(0L, 1L, 0L), new QArray<Int64>(1L, 0L, 0L), new QArray<Int64>(1L, 1L, 0L), new QArray<Int64>(1L, 1L, 1L));
#line 19 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
            foreach (var secretArray in secretArrayArray?.Copy())
#line hidden
            {
#line hidden
                {
#line 20 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                    var (input,output) = (Allocate__.Apply(3L), Allocate__.Apply());
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 21 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 22 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                        Microsoft__Quantum__Intrinsic__H.Apply(output);
#line 24 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                        QSharpExercises__BonusLab12__Exercise1.Apply((secretArray, input, output));
#line 26 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                        foreach (var i in new QRange(0L, (input.Length - 1L)))
#line hidden
                        {
#line 27 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                            if ((secretArray[i] == 1L))
                            {
#line 27 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                                Microsoft__Quantum__Canon__CX.Apply((input[i], output));
                            }
                        }

#line 29 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                        Microsoft__Quantum__Intrinsic__H.Apply(output);
#line 30 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 32 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                        Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(input, new QArray<Qubit>(output)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(input);
#line hidden
                            Release__.Apply(output);
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.QSharpExercises__BonusLab12__Exercise1 = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid>>(typeof(global::QSharpExercises.BonusLab12.Exercise1));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Canon__CX = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Canon.CX));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise1Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs", OperationFunctor.Body, 37, -1)]
    public partial class Exercise2Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise2Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise2Test")]
            public void Exercise2Test()
#line 37 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise2Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 37 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise2Test";
        String ICallable.FullName => "QSharpExercises.Tests.BonusLab12.Exercise2Test";
        protected ICallable<(Int64,ICallable), IQArray<Int64>> QSharpExercises__BonusLab12__Exercise2
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid> QSharpExercises__BonusLab12__Exercise1
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__EqualA
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Boolean> Microsoft__Quantum__Logical__EqualI
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 38 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
            var secretArrayArray = new QArray<IQArray<Int64>>(new QArray<Int64>(0L, 0L, 0L), new QArray<Int64>(0L, 0L, 1L), new QArray<Int64>(0L, 1L, 0L), new QArray<Int64>(1L, 0L, 0L), new QArray<Int64>(1L, 1L, 0L), new QArray<Int64>(1L, 1L, 1L));
#line 39 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
            foreach (var secretArray in secretArrayArray?.Copy())
#line hidden
            {
#line 40 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                var retString = (IQArray<Int64>)QSharpExercises__BonusLab12__Exercise2.Apply((3L, QSharpExercises__BonusLab12__Exercise1.Partial(new Func<(IQArray<Qubit>,Qubit), (IQArray<Int64>,IQArray<Qubit>,Qubit)>((__arg1__) => (secretArray, __arg1__.Item1, __arg1__.Item2)))));
#line 41 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                if (!(Microsoft__Quantum__Arrays__EqualA.Apply<Boolean>((Microsoft__Quantum__Logical__EqualI, secretArray, retString))))
                {
#line 42 "/home/ace/scripts/quantum/QSharpExercises/Lab12/Lab12Tests.qs"
                    throw new ExecutionFailException(String.Format("Incorrectly guessed {0} and not {1}.", retString, secretArray));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.QSharpExercises__BonusLab12__Exercise2 = this.__Factory__.Get<ICallable<(Int64,ICallable), IQArray<Int64>>>(typeof(global::QSharpExercises.BonusLab12.Exercise2));
            this.QSharpExercises__BonusLab12__Exercise1 = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid>>(typeof(global::QSharpExercises.BonusLab12.Exercise1));
            this.Microsoft__Quantum__Arrays__EqualA = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.EqualA<>));
            this.Microsoft__Quantum__Logical__EqualI = this.__Factory__.Get<ICallable<(Int64,Int64), Boolean>>(typeof(global::Microsoft.Quantum.Logical.EqualI));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise2Test, QVoid, QVoid>(QVoid.Instance);
        }
    }
}