//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise1\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":10}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":10}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"input\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"output\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the quantum modular\",\" exponentiation function: |o> = a^|x> mod b.\",\" |x> and |o> are input and output registers respectively, and a and b\",\" are classical integers.\",\"\",\" # Input\",\" ## a\",\" The base power of the term being exponentiated.\",\"\",\" ## b\",\" The modulus for the function.\",\"\",\" ## input\",\" The register containing a superposition of all of the exponent values\",\" that the user wants to calculate; this superposition is arbitrary.\",\"\",\" ## output\",\" This register must contain the output |o> of the modular\",\" exponentiation function. It will start in the |0...0> state.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":16},\"Item2\":{\"Line\":1,\"Column\":24}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the quantum subroutine of Shor's\",\" algorithm. You will be given a number to factor and some guess to a\",\" possible factor - both of which are integers.\",\" You must set up, execute, and measure the quantum circuit.\",\" You should return the fraction that was produced by measuring the\",\" result at the end of the subroutine, in the form of a tuple:\",\" the first value should be the number you measured, and the second\",\" value should be 2^n, where n is the number of qubits you use in your\",\" input register.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number that the user wants to factor. This will become the modulus\",\" for the modular arithmetic used in the subroutine.\",\"\",\" ## guess\",\" The number that's being guessed as a possible factor. This will become\",\" the base of exponentiation for the modular arithmetic used in the\",\" subroutine.\",\"\",\" # Output\",\" A tuple representing the continued fraction approximation that the\",\" subroutine measured. The first value should be the numerator (the\",\" value that was measured from the qubits), and the second value should\",\" be the denominator (the total size of the input space, which is 2^n\",\" where n is the size of your input register).\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":55}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Lab9.QFT\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":55}},\"Documentation\":[\"automatically generated QsControlled specialization for Lab9.QFT\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":55}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Lab9.QFT\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise2\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":110,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":14}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise2\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":110,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise3\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":191,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numerator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":18}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"denominator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":20}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"denominatorThreshold\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you will be given an arbitrary numerator and\",\" denominator for a fraction, along with some threshold value for the\",\" denominator.\",\" Your goal is to return the largest convergent of the continued\",\" fraction that matches the provided number, with the condition that the\",\" denominator of your convergent must be less than the threshold value.\",\"\",\" Using the example from the lecture section, if you are given the\",\" number 341 / 512 with a threshold of 21, the most accurate convergent\",\" that respects this threshold is 2 / 3, so that's what you would return.\",\"\",\" # Input\",\" ## numerator\",\" The numerator of the original fraction\",\"\",\" ## denominator\",\" The denominator of the original fraction\",\"\",\" ## denominatorThreshold\",\" A threshold value for the denominator. The continued fraction\",\" convergent that you find must be less than this value. If it's higher,\",\" you must return the previous convergent.\",\"\",\" # Output\",\" A tuple representing the convergent that you found. The first element\",\" should be the numerator, and the second should be the denominator.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise3\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":191,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise4Helper\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":252,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":55}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given two integers - a number that you want\",\" to find the factors of, and an arbitrary guess as to one of the\",\" factors of the number. This guess was already checked to see if it was\",\" a factor of the number, so you know that it *isn't* a factor. It is\",\" guaranteed to be co-prime with numberToFactor.\",\"\",\" Your job is to find the period of the modular exponentation function\",\" using these two values as the arguments. That is, you must find the\",\" period of the equation y = guess^x mod numberToFactor.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number that the user wants to find the factors for\",\"\",\" ## guess\",\" Some co-prime integer that is smaller than numberToFactor\",\"\",\" # Output\",\" The period of y = guess^x mod numberToFactor.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise4Helper\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":252,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise4\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":264,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":49}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise4\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":264,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise5\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":318,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"period\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":22},\"Item2\":{\"Line\":3,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given a number to find the factors of,\",\" a guess of a factor (which is guaranteed to be co-prime), and the\",\" period of the modular exponentiation function that you found in\",\" Exercise 4.\",\"\",\" Your goal is to use the period to find a factor of the number if\",\" possible.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number to find a factor of\",\"\",\" ## guess\",\" A co-prime number that is *not* a factor\",\"\",\" ## period\",\" The period of the function y = guess^x mod numberToFactor.\",\"\",\" # Output\",\" - If you can find a factor, return that factor.\",\" - If the period is odd, return -1.\",\" - If the period doesn't work for factoring, return -2.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise5\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs\",\"Position\":{\"Item1\":318,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
#line hidden
namespace Lab9
{
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 34, 87)]
    public partial class Exercise1 : Operation<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>, ICallable
    {
        public Exercise1(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,Int64,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Exercise1";
        String ICallable.FullName => "Lab9.Exercise1";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> Microsoft__Quantum__Math__ExpModI
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__MultiplyByModularInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (a,b,input,output) = __in__;
#line 48 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(output[(output.Length - 1L)]);
#line 49 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, (input.Length - 1L)))
#line hidden
            {
#line 50 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                var power = ((input.Length - i) - 1L);
#line 51 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                var constantA = 2L.Pow(power);
#line 52 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                var constantB = Microsoft__Quantum__Math__ExpModI.Apply((a, constantA, b));
#line 54 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Arithmetic__MultiplyByModularInteger.Controlled.Apply((new QArray<Qubit>(input[i]), (constantB, b, new Microsoft.Quantum.Arithmetic.LittleEndian(output))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__ExpModI = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ExpModI));
            this.Microsoft__Quantum__Arithmetic__MultiplyByModularInteger = this.__Factory__.Get<IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.MultiplyByModularInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 a, Int64 b, IQArray<Qubit> input, IQArray<Qubit> output)
        {
            return __m__.Run<Exercise1, (Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, b, input, output));
        }
    }

    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 87, 111)]
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Adjoint, 87, 111)]
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Controlled, 87, 111)]
    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.ControlledAdjoint, 87, 111)]
    public partial class QFT : Unitary<IQArray<Qubit>>, ICallable
    {
        public QFT(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "QFT";
        String ICallable.FullName => "Lab9.QFT";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Qubit)> Microsoft__Quantum__Intrinsic__R1Frac
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__SWAP
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 96 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, (register.Length - 1L)))
#line hidden
            {
#line 97 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__H.Apply(register[i]);
#line 98 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                foreach (var j in new QRange((i + 1L), (register.Length - 1L)))
#line hidden
                {
#line 99 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Apply((new QArray<Qubit>(register[j]), (2L, ((j - i) + 1L), register[i])));
                }
            }

#line 103 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var length = register.Length;
#line 104 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var halfLength = (length / 2L);
#line 105 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, (halfLength - 1L)))
#line hidden
            {
#line 106 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Apply((register[i], register[((length - 1L) - i)]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var __qsVar2__length__ = register.Length;
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var __qsVar3__halfLength__ = (__qsVar2__length__ / 2L);
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var __qsVar4__i__ in RangeReverse__.Apply(new QRange(0L, (__qsVar3__halfLength__ - 1L))))
#line hidden
            {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Adjoint.Apply((register[__qsVar4__i__], register[((__qsVar2__length__ - 1L) - __qsVar4__i__)]));
            }

#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange(0L, (register.Length - 1L))))
#line hidden
            {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                foreach (var __qsVar1__j__ in RangeReverse__.Apply(new QRange((__qsVar0__i__ + 1L), (register.Length - 1L))))
#line hidden
                {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Adjoint.Apply((new QArray<Qubit>(register[__qsVar1__j__]), (2L, ((__qsVar1__j__ - __qsVar0__i__) + 1L), register[__qsVar0__i__])));
                }

#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(register[__qsVar0__i__]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, (register.Length - 1L)))
#line hidden
            {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__H.Controlled.Apply((__controlQubits__, register[i]));
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                foreach (var j in new QRange((i + 1L), (register.Length - 1L)))
#line hidden
                {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(register[j]), (2L, ((j - i) + 1L), register[i]))));
                }
            }

#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var length = register.Length;
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var halfLength = (length / 2L);
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var i in new QRange(0L, (halfLength - 1L)))
#line hidden
            {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Controlled.Apply((__controlQubits__, (register[i], register[((length - 1L) - i)])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var __qsVar2__length__ = register.Length;
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var __qsVar3__halfLength__ = (__qsVar2__length__ / 2L);
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var __qsVar4__i__ in RangeReverse__.Apply(new QRange(0L, (__qsVar3__halfLength__ - 1L))))
#line hidden
            {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__SWAP.Adjoint.Controlled.Apply((__controlQubits__, (register[__qsVar4__i__], register[((__qsVar2__length__ - 1L) - __qsVar4__i__)])));
            }

#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange(0L, (register.Length - 1L))))
#line hidden
            {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                foreach (var __qsVar1__j__ in RangeReverse__.Apply(new QRange((__qsVar0__i__ + 1L), (register.Length - 1L))))
#line hidden
                {
#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(register[__qsVar1__j__]), (2L, ((__qsVar1__j__ - __qsVar0__i__) + 1L), register[__qsVar0__i__]))));
                }

#line 87 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                Microsoft__Quantum__Intrinsic__H.Adjoint.Controlled.Apply((__controlQubits__, register[__qsVar0__i__]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__R1Frac = this.__Factory__.Get<IUnitary<(Int64,Int64,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.R1Frac));
            this.Microsoft__Quantum__Intrinsic__SWAP = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.SWAP));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<QFT, IQArray<Qubit>, QVoid>(register);
        }
    }

    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 111, 192)]
    public partial class Exercise2 : Operation<(Int64,Int64), (Int64,Int64)>, ICallable
    {
        public Exercise2(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise2";
        String ICallable.FullName => "Lab9.Exercise2";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Log
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> Exercise1__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> QFT__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<Result, Boolean> Microsoft__Quantum__Convert__ResultAsBool
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), (Int64,Int64)> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess) = __in__;
#line 127 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var outputLength = Microsoft__Quantum__Math__Ceiling.Apply((Microsoft__Quantum__Math__Log.Apply((Microsoft__Quantum__Convert__IntAsDouble.Apply(numberToFactor) + 1D)) / Microsoft__Quantum__Math__Log.Apply(2D)));
#line 128 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var inputLength = (2L * outputLength);
#line hidden
            {
#line 130 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                var output = Allocate__.Apply(outputLength);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 131 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                        var input = Allocate__.Apply(inputLength);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 133 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 135 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            Exercise1__.Apply((guess, numberToFactor, input, output));
#line 137 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            QFT__.Adjoint.Apply(input);
#line 139 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            var results = QArray<Result>.Create(input.Length);
#line 141 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            foreach (var i in new QRange(0L, (input.Length - 1L)))
#line hidden
                            {
#line 142 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                                results.Modify(i, Microsoft__Quantum__Intrinsic__M.Apply(input[i]));
                            }

#line 145 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            var num = 0L;
#line 147 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            foreach (var i in new QRange(0L, (input.Length - 1L)))
#line hidden
                            {
#line 148 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                                if (Microsoft__Quantum__Convert__ResultAsBool.Apply(results[i]))
                                {
#line 149 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                                    num = (num + 2L.Pow(((input.Length - 1L) - i)));
                                }
                            }

#line 153 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            if ((num > 2L.Pow((inputLength - 1L))))
                            {
#line 154 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                                num = (2L.Pow(inputLength) - num);
                            }

#line 157 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            ResetAll__.Apply(QArray<Qubit>.Add(output, input));
#line 160 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                            return (num, 2L.Pow(inputLength));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(input);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(output);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Log = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Log));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Exercise1__ = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(Exercise1));
            this.QFT__ = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(QFT));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Convert__ResultAsBool = this.__Factory__.Get<ICallable<Result, Boolean>>(typeof(global::Microsoft.Quantum.Convert.ResultAsBool));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess)
        {
            return __m__.Run<Exercise2, (Int64,Int64), (Int64,Int64)>((numberToFactor, guess));
        }
    }

    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 192, 253)]
    public partial class Exercise3 : Function<(Int64,Int64,Int64), (Int64,Int64)>, ICallable
    {
        public Exercise3(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise3";
        String ICallable.FullName => "Lab9.Exercise3";
        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), (Int64,Int64)> __Body__ => (__in__) =>
        {
            var (numerator,denominator,denominatorThreshold) = __in__;
#line 199 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            Message__.Apply(String.Format("initial numerator: {0}, initial denominator: {1}", numerator, denominator));
#line 201 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var p = new QArray<Int64>(0L, numerator);
#line 202 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var q = new QArray<Int64>(0L, denominator);
#line 203 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var a = new QArray<Int64>(0L, (p[1L] / q[1L]));
#line 204 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var r = new QArray<Int64>(0L, (p[1L] % q[1L]));
#line 205 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var n = new QArray<Int64>(1L, ((a[1L] * 1L) + 0L));
#line 206 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var d = new QArray<Int64>(0L, ((a[1L] * 0L) + 1L));
#line 208 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            p = QArray<Int64>.Add(p, new QArray<Int64>(q[1L]));
#line 209 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            q = QArray<Int64>.Add(q, new QArray<Int64>(r[1L]));
#line 210 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var i = 2L;
#line 211 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            if ((r[1L] == 0L))
            {
#line 212 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                return (n[1L], d[1L]);
            }

#line 215 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            while (((r[(i - 1L)] != 0L) && (d[(i - 1L)] < denominatorThreshold)))
            {
#line 216 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                a = QArray<Int64>.Add(a, new QArray<Int64>((p[i] / q[i])));
#line 217 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                r = QArray<Int64>.Add(r, new QArray<Int64>((p[i] % q[i])));
#line 218 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                n = QArray<Int64>.Add(n, new QArray<Int64>(((a[i] * n[(i - 1L)]) + n[(i - 2L)])));
#line 219 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                d = QArray<Int64>.Add(d, new QArray<Int64>(((a[i] * d[(i - 1L)]) + d[(i - 2L)])));
#line 221 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                p = QArray<Int64>.Add(p, new QArray<Int64>(q[i]));
#line 222 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                q = QArray<Int64>.Add(q, new QArray<Int64>(r[i]));
#line 223 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                i = (i + 1L);
            }

#line 226 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            if ((d[(i - 1L)] > denominatorThreshold))
            {
#line 227 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                return (n[(i - 2L)], d[(i - 2L)]);
            }

#line 229 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            return (n[(i - 1L)], d[(i - 1L)]);
        }

        ;
        public override void __Init__()
        {
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 numerator, Int64 denominator, Int64 denominatorThreshold)
        {
            return __m__.Run<Exercise3, (Int64,Int64,Int64), (Int64,Int64)>((numerator, denominator, denominatorThreshold));
        }
    }

    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 253, 265)]
    public partial class Exercise4Helper : Operation<(Int64,Int64), Int64>, ICallable
    {
        public Exercise4Helper(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise4Helper";
        String ICallable.FullName => "Lab9.Exercise4Helper";
        protected ICallable<(Int64,Int64), (Int64,Int64)> Exercise2__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), (Int64,Int64)> Exercise3__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess) = __in__;
#line 254 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var (numerator,denominator) = Exercise2__.Apply((numberToFactor, guess));
#line 255 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            if ((numerator == 0L))
            {
#line 256 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                while (true)
                {
#line 257 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                    (numerator, denominator) = Exercise2__.Apply((numberToFactor, guess));
                    if ((numerator != 0L))
                    {
                        break;
                    }
                    else
                    {
                    }
                }
            }

#line 261 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            (numerator, denominator) = Exercise3__.Apply((numerator, denominator, numberToFactor));
#line 262 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            return denominator;
        }

        ;
        public override void __Init__()
        {
            this.Exercise2__ = this.__Factory__.Get<ICallable<(Int64,Int64), (Int64,Int64)>>(typeof(Exercise2));
            this.Exercise3__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), (Int64,Int64)>>(typeof(Exercise3));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess)
        {
            return __m__.Run<Exercise4Helper, (Int64,Int64), Int64>((numberToFactor, guess));
        }
    }

    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 265, 319)]
    public partial class Exercise4 : Operation<(Int64,Int64), Int64>, ICallable
    {
        public Exercise4(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise4";
        String ICallable.FullName => "Lab9.Exercise4";
        protected ICallable<(Int64,Int64), Int64> Exercise4Helper__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__GreatestCommonDivisorI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess) = __in__;
#line 278 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var factor = Exercise4Helper__.Apply((numberToFactor, guess));
#line 279 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var d_old = 0L;
#line 280 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var d_new = 0L;
#line 281 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            if (((guess.Pow(factor) % numberToFactor) != 1L))
            {
#line 282 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                while (true)
                {
#line 283 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                    d_old = factor;
#line 284 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                    while (true)
                    {
#line 285 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                        d_new = Exercise4Helper__.Apply((numberToFactor, guess));
                        if ((d_new != d_old))
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 288 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                    factor = ((d_old * d_new) / Microsoft__Quantum__Math__GreatestCommonDivisorI.Apply((d_old, d_new)));
                    if (((guess.Pow(factor) % numberToFactor) == 1L))
                    {
                        break;
                    }
                    else
                    {
                    }
                }
            }

#line 292 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            return factor;
        }

        ;
        public override void __Init__()
        {
            this.Exercise4Helper__ = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(Exercise4Helper));
            this.Microsoft__Quantum__Math__GreatestCommonDivisorI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess)
        {
            return __m__.Run<Exercise4, (Int64,Int64), Int64>((numberToFactor, guess));
        }
    }

    [SourceLocation("/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs", OperationFunctor.Body, 319, -1)]
    public partial class Exercise5 : Function<(Int64,Int64,Int64), Int64>, ICallable
    {
        public Exercise5(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise5";
        String ICallable.FullName => "Lab9.Exercise5";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__GreatestCommonDivisorI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess,period) = __in__;
#line 325 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            if (((period % 2L) == 1L))
            {
#line 326 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                return -(1L);
            }

#line 328 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var constant = (guess.Pow((period / 2L)) % numberToFactor);
#line 329 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            if (((constant == 1L) || (constant == -(1L))))
            {
#line 330 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                return -(2L);
            }

#line 333 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var factor1 = Microsoft__Quantum__Math__GreatestCommonDivisorI.Apply((numberToFactor, (constant + 1L)));
#line 334 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            var factor2 = Microsoft__Quantum__Math__GreatestCommonDivisorI.Apply((numberToFactor, (constant - 1L)));
#line 335 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
            if (((((factor1 * factor2) == numberToFactor) && (factor1 > 2L)) && (factor1 < numberToFactor)))
            {
#line 336 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                return factor1;
            }
            else
            {
#line 338 "/home/ace/scripts/quantum/QSharpExercises/Lab9/Lab9.qs"
                return -(2L);
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__GreatestCommonDivisorI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess, Int64 period)
        {
            return __m__.Run<Exercise5, (Int64,Int64,Int64), Int64>((numberToFactor, guess, period));
        }
    }
}