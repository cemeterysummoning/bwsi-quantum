//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"DFT\",\"Name\":\"DFT\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ace/scripts/quantum/DFT/DFT.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"x\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Math\",\"Name\":\"ComplexPolar\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":19},\"Item2\":{\"Line\":1,\"Column\":31}}]}}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":16},\"Item2\":{\"Line\":1,\"Column\":17}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Math\",\"Name\":\"ComplexPolar\",\"Range\":{\"Case\":\"Null\"}}]}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Math\",\"Name\":\"ComplexPolar\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":37},\"Item2\":{\"Line\":1,\"Column\":49}}]}}]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this extra problem, you will implement the Discrete Fourier Transform (DFT)\",\" This function should accept an array of N complex numbers, x, and return the transformed array of N complex numbers, X.\",\"Each element of the new array is the sum from n=0 to N-1 of xn*e^-i*2*pi*k*n/N\",\"\",\" # Input\",\" ## x\",\" An array of N complex numbers to be transformed\",\"\",\" # Output\",\" ## An array of N transformed complex numbers\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"DFT\",\"Name\":\"DFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ace/scripts/quantum/DFT/DFT.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"Documentation\":[]}")]
#line hidden
namespace DFT
{
    [SourceLocation("/home/ace/scripts/quantum/DFT/DFT.qs", OperationFunctor.Body, 25, -1)]
    public partial class DFT : Operation<IQArray<Microsoft.Quantum.Math.ComplexPolar>, IQArray<Microsoft.Quantum.Math.ComplexPolar>>, ICallable
    {
        public DFT(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "DFT";
        String ICallable.FullName => "DFT.DFT";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<(Double,Double), Microsoft.Quantum.Math.ComplexPolar> Microsoft__Quantum__Math__ComplexPolar
        {
            get;
            set;
        }

        protected ICallable<(Microsoft.Quantum.Math.ComplexPolar,Microsoft.Quantum.Math.ComplexPolar), Microsoft.Quantum.Math.ComplexPolar> Microsoft__Quantum__Math__TimesCP
        {
            get;
            set;
        }

        protected ICallable<(Microsoft.Quantum.Math.ComplexPolar,Microsoft.Quantum.Math.ComplexPolar), Microsoft.Quantum.Math.ComplexPolar> Microsoft__Quantum__Math__PlusCP
        {
            get;
            set;
        }

        public override Func<IQArray<Microsoft.Quantum.Math.ComplexPolar>, IQArray<Microsoft.Quantum.Math.ComplexPolar>> __Body__ => (__in__) =>
        {
            var x = __in__;
#line 28 "/home/ace/scripts/quantum/DFT/DFT.qs"
            var length = x.Length;
#line 29 "/home/ace/scripts/quantum/DFT/DFT.qs"
            var transformed = QArray<Microsoft.Quantum.Math.ComplexPolar>.Create(x.Length);
#line 31 "/home/ace/scripts/quantum/DFT/DFT.qs"
            foreach (var i in new QRange(0L, (length - 1L)))
#line hidden
            {
#line 32 "/home/ace/scripts/quantum/DFT/DFT.qs"
                foreach (var j in new QRange(0L, (length - 1L)))
#line hidden
                {
#line 33 "/home/ace/scripts/quantum/DFT/DFT.qs"
                    var x_n = x[j];
#line 34 "/home/ace/scripts/quantum/DFT/DFT.qs"
                    var phase = ((((-(2D) * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) / Microsoft__Quantum__Convert__IntAsDouble.Apply(length)) * Microsoft__Quantum__Convert__IntAsDouble.Apply(i)) * Microsoft__Quantum__Convert__IntAsDouble.Apply(j));
#line 35 "/home/ace/scripts/quantum/DFT/DFT.qs"
                    var tempPolar = new Microsoft.Quantum.Math.ComplexPolar((1D, phase));
#line 37 "/home/ace/scripts/quantum/DFT/DFT.qs"
                    var temp = Microsoft__Quantum__Math__TimesCP.Apply((x_n, tempPolar));
#line 38 "/home/ace/scripts/quantum/DFT/DFT.qs"
                    transformed.Modify(i, Microsoft__Quantum__Math__PlusCP.Apply((transformed[i], temp)));
                }
            }

#line 42 "/home/ace/scripts/quantum/DFT/DFT.qs"
            return transformed;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Math__ComplexPolar = this.__Factory__.Get<ICallable<(Double,Double), Microsoft.Quantum.Math.ComplexPolar>>(typeof(global::Microsoft.Quantum.Math.ComplexPolar));
            this.Microsoft__Quantum__Math__TimesCP = this.__Factory__.Get<ICallable<(Microsoft.Quantum.Math.ComplexPolar,Microsoft.Quantum.Math.ComplexPolar), Microsoft.Quantum.Math.ComplexPolar>>(typeof(global::Microsoft.Quantum.Math.TimesCP));
            this.Microsoft__Quantum__Math__PlusCP = this.__Factory__.Get<ICallable<(Microsoft.Quantum.Math.ComplexPolar,Microsoft.Quantum.Math.ComplexPolar), Microsoft.Quantum.Math.ComplexPolar>>(typeof(global::Microsoft.Quantum.Math.PlusCP));
        }

        public override IApplyData __DataIn__(IQArray<Microsoft.Quantum.Math.ComplexPolar> data) => data;
        public override IApplyData __DataOut__(IQArray<Microsoft.Quantum.Math.ComplexPolar> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Microsoft.Quantum.Math.ComplexPolar>> Run(IOperationFactory __m__, IQArray<Microsoft.Quantum.Math.ComplexPolar> x)
        {
            return __m__.Run<DFT, IQArray<Microsoft.Quantum.Math.ComplexPolar>, IQArray<Microsoft.Quantum.Math.ComplexPolar>>(x);
        }
    }
}